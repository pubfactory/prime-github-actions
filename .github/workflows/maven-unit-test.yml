############################################################################################
# Workflow that checks out code, runs `mvn clean test`, generates test reports, and commits code coverage badge (if configured)
# To use this workflow we assume you have a branch called "badges" for the badges to live in
#
# By: JGF
############################################################################################

name: Maven Unit Test

on:
  workflow_call:
    inputs:
      push-to-nexus:
        description: 'should we push the resulting artifact to nexus - default=false'
        default: false
        required: false
        type: boolean
      create-jacoco-badge:
        description: 'Do you want to create the jacoco badge?'
        default: true
        required: false
        type: boolean
      commit-jacoco-badge:
        description: 'Do you want to commit the jacoco badge after generating code coverage data?'
        default: true
        required: false
        type: boolean
      jacoco-csv-file:
        description: 'the file or files to consider when calculating code coverage'
        default: 'target/jacoco-report/jacoco.csv'
        required: false
        type: string
    secrets:
      MAVEN_SETTINGS:
        required: true
      SLACK_WEBHOOK:
        required: true
      JAVA_DISTRIBUTION:
        required: true
      JAVA_VERSION:
        required: true
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_PASSWORD:
        required: true
    outputs:
      version-number:
        description: "Maven version number of the project"
        value: ${{ jobs.unit-test.outputs.version-number }}

jobs:

  unit-test:

    runs-on: ubuntu-latest

    steps:
      - name: Set Git Branch
        if: github.event.action == 'upstream-job-success'
        run: |
          echo "Recieved upstream-job-success message from ${{ github.event.client_payload.repository }} on branch ${{ github.event.client_payload.branch }}"
          echo "GITHUB_REF_NAME=${{ github.event.client_payload.branch }}" >> $GITHUB_ENV

      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Checkout badges branch to a badges directory nested inside first checkout
        if: ${{ inputs.create-jacoco-badge }}
        uses: actions/checkout@v3
        with:
          ref: badges
          path: badges

      - name: Set up JDK ${{ secrets.JAVA_VERSION }}
        uses: actions/setup-java@v3.4.0
        with:
          java-version: ${{ secrets.JAVA_VERSION }}
          distribution: ${{ secrets.JAVA_DISTRIBUTION }}
          cache: maven

      - name: Override maven settings.xml
        run: |
          echo $MAVEN_SETTINGS > ~/.m2/settings.xml
        shell: bash
        env:
          MAVEN_SETTINGS: ${{ secrets.MAVEN_SETTINGS }}

      - name: Log into docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Maven run unit tests
        id: maven
        run: |
          echo "::set-output name=version-number::$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)"
          if [[ ${{ inputs.push-to-nexus }} == 'true' ]]; then
            echo "running unit tests and deploying to nexus"
            mvn -B -U clean verify package deploy
          fi
          if [[ ${{ inputs.push-to-nexus }} != 'true' ]]; then
            echo "running unit tests only"
            mvn -B -U clean verify
          fi

      - name: Generate JaCoCo Badge
        if: ${{ inputs.create-jacoco-badge }}
        id: jacoco
        uses: cicirello/jacoco-badge-generator@v2.7.0
        with:
          badges-directory: badges_dir
          generate-summary: true
          on-missing-report: quiet
          fail-if-coverage-less-than: 75
          jacoco-csv-file: ${{ inputs.jacoco-csv-file }}

      - name: Log coverage percentage
        if: ${{ inputs.create-jacoco-badge }}
        run: |
          echo "coverage = ${{ steps.jacoco.outputs.coverage }}"
          echo "branch coverage = ${{ steps.jacoco.outputs.branches }}"

      - name: Commit the badge (if it changed)
        if: ${{ inputs.create-jacoco-badge }}
        run: |
          mkdir -p badges/$GITHUB_REF_NAME
          cp -rf badges_dir/* badges/$GITHUB_REF_NAME/.
          if [[ ${{ inputs.commit-jacoco-badge }}  == 'true' ]]; then
            cd badges/$GITHUB_REF_NAME
            if [[ `git status --porcelain` ]]; then
              git config --global user.name 'pubfactory-service'
              git config --global user.email 'noreply@pubfactory.com'
              git add -A
              git commit -m "Autogenerated JaCoCo coverage badge"
              git push
            fi
          fi
          if [[ ${{ inputs.commit-jacoco-badge }} != 'true' ]]; then
            echo "configured not to commit badge"
          fi

      - name: Upload JaCoCo coverage report
        if: ${{ inputs.create-jacoco-badge }}
        uses: actions/upload-artifact@v3
        with:
          name: jacoco-report
          path: |
            target/jacoco-report/*
            */target/jacoco-report/*
            */jacoco-aggregate/*
            badges_dir/*

      - name: Send ${{ job.status }} message to prime-chatops room
        uses: act10ns/slack@v1.6.0
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#prime-chatops'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Send ${{ job.status }} message to prime room
        uses: act10ns/slack@v1.6.0
        if: ${{ failure() }}
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

    outputs:
      version-number: ${{ steps.maven.outputs.version-number }}